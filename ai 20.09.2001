{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "sMW12_LiEiL-"
      },
      "outputs": [],
      "source": [
        "# Importing required lib\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading the dataset\n",
        "\n",
        "df = pd.read_csv('/content/50_Startups.csv')"
      ],
      "metadata": {
        "id": "InLBb6foJzst"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualizing 1st 5 data\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "P4r8XtyIKJAD",
        "outputId": "0102a028-8305-4ec4-c971-796946519f98"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   R&D Spend  Administration  Marketing Spend       State     Profit\n",
              "0  165349.20       136897.80        471784.10    New York  192261.83\n",
              "1  162597.70       151377.59        443898.53  California  191792.06\n",
              "2  153441.51       101145.55        407934.54     Florida  191050.39\n",
              "3  144372.41       118671.85        383199.62    New York  182901.99\n",
              "4  142107.34        91391.77        366168.42     Florida  166187.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-352057fe-b1dc-4bb5-bc83-211d14d5d7f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>R&amp;D Spend</th>\n",
              "      <th>Administration</th>\n",
              "      <th>Marketing Spend</th>\n",
              "      <th>State</th>\n",
              "      <th>Profit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>165349.20</td>\n",
              "      <td>136897.80</td>\n",
              "      <td>471784.10</td>\n",
              "      <td>New York</td>\n",
              "      <td>192261.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>162597.70</td>\n",
              "      <td>151377.59</td>\n",
              "      <td>443898.53</td>\n",
              "      <td>California</td>\n",
              "      <td>191792.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>153441.51</td>\n",
              "      <td>101145.55</td>\n",
              "      <td>407934.54</td>\n",
              "      <td>Florida</td>\n",
              "      <td>191050.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>144372.41</td>\n",
              "      <td>118671.85</td>\n",
              "      <td>383199.62</td>\n",
              "      <td>New York</td>\n",
              "      <td>182901.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>142107.34</td>\n",
              "      <td>91391.77</td>\n",
              "      <td>366168.42</td>\n",
              "      <td>Florida</td>\n",
              "      <td>166187.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-352057fe-b1dc-4bb5-bc83-211d14d5d7f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-352057fe-b1dc-4bb5-bc83-211d14d5d7f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-352057fe-b1dc-4bb5-bc83-211d14d5d7f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for data types\n",
        "\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-FgCisIKhm4",
        "outputId": "c4e310d7-4f8f-40c5-9dae-d24b00060258"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 108 entries, 0 to 107\n",
            "Data columns (total 5 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   R&D Spend        108 non-null    float64\n",
            " 1   Administration   108 non-null    float64\n",
            " 2   Marketing Spend  108 non-null    float64\n",
            " 3   State            108 non-null    object \n",
            " 4   Profit           108 non-null    float64\n",
            "dtypes: float64(4), object(1)\n",
            "memory usage: 4.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for null values\n",
        "\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "krziaQIoK2ak",
        "outputId": "1bb81527-171e-41da-e6ff-747de2c35a1c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "R&D Spend          0\n",
              "Administration     0\n",
              "Marketing Spend    0\n",
              "State              0\n",
              "Profit             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for state value count\n",
        "\n",
        "df['State'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ME51MrtPLAQm",
        "outputId": "f0119ad2-d0ee-4018-9e25-09e66eb39a89"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "New York      39\n",
              "California    36\n",
              "Florida       33\n",
              "Name: State, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "A7Pl5RNnLbRM"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initializing encoder\n",
        "\n",
        "le = LabelEncoder()"
      ],
      "metadata": {
        "id": "7L-v8guvMLQ6"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Transforming values\n",
        "\n",
        "df['State'] = le.fit_transform(df['State'])"
      ],
      "metadata": {
        "id": "XEzl4D2yMPYs"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9tNbu4aPMXvV",
        "outputId": "5d64c82b-87f3-4dbd-bde8-520dfbde0398"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   R&D Spend  Administration  Marketing Spend  State     Profit\n",
              "0  165349.20       136897.80        471784.10      2  192261.83\n",
              "1  162597.70       151377.59        443898.53      0  191792.06\n",
              "2  153441.51       101145.55        407934.54      1  191050.39\n",
              "3  144372.41       118671.85        383199.62      2  182901.99\n",
              "4  142107.34        91391.77        366168.42      1  166187.94"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-363185cf-c8d2-4be8-a769-15a3ee4cdf38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>R&amp;D Spend</th>\n",
              "      <th>Administration</th>\n",
              "      <th>Marketing Spend</th>\n",
              "      <th>State</th>\n",
              "      <th>Profit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>165349.20</td>\n",
              "      <td>136897.80</td>\n",
              "      <td>471784.10</td>\n",
              "      <td>2</td>\n",
              "      <td>192261.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>162597.70</td>\n",
              "      <td>151377.59</td>\n",
              "      <td>443898.53</td>\n",
              "      <td>0</td>\n",
              "      <td>191792.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>153441.51</td>\n",
              "      <td>101145.55</td>\n",
              "      <td>407934.54</td>\n",
              "      <td>1</td>\n",
              "      <td>191050.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>144372.41</td>\n",
              "      <td>118671.85</td>\n",
              "      <td>383199.62</td>\n",
              "      <td>2</td>\n",
              "      <td>182901.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>142107.34</td>\n",
              "      <td>91391.77</td>\n",
              "      <td>366168.42</td>\n",
              "      <td>1</td>\n",
              "      <td>166187.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-363185cf-c8d2-4be8-a769-15a3ee4cdf38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-363185cf-c8d2-4be8-a769-15a3ee4cdf38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-363185cf-c8d2-4be8-a769-15a3ee4cdf38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data (independent & dependent variables)\n",
        "\n",
        "x = df.iloc[:,0:4].values\n",
        "y = df.iloc[:,4:5].values"
      ],
      "metadata": {
        "id": "8n2K9YsIOZdB"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ZE1ZS86PHDg",
        "outputId": "e0f6d2c9-1575-484f-a586-901bf7cddcc4"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.6534920e+05, 1.3689780e+05, 4.7178410e+05, 2.0000000e+00],\n",
              "       [1.6259770e+05, 1.5137759e+05, 4.4389853e+05, 0.0000000e+00],\n",
              "       [1.5344151e+05, 1.0114555e+05, 4.0793454e+05, 1.0000000e+00],\n",
              "       [1.4437241e+05, 1.1867185e+05, 3.8319962e+05, 2.0000000e+00],\n",
              "       [1.4210734e+05, 9.1391770e+04, 3.6616842e+05, 1.0000000e+00],\n",
              "       [1.3187690e+05, 9.9814710e+04, 3.6286136e+05, 2.0000000e+00],\n",
              "       [1.3461546e+05, 1.4719887e+05, 1.2771682e+05, 0.0000000e+00],\n",
              "       [1.3029813e+05, 1.4553006e+05, 3.2387668e+05, 1.0000000e+00],\n",
              "       [1.2054252e+05, 1.4871895e+05, 3.1161329e+05, 2.0000000e+00],\n",
              "       [1.2333488e+05, 1.0867917e+05, 3.0498162e+05, 0.0000000e+00],\n",
              "       [1.0191308e+05, 1.1059411e+05, 2.2916095e+05, 1.0000000e+00],\n",
              "       [1.0067196e+05, 9.1790610e+04, 2.4974455e+05, 0.0000000e+00],\n",
              "       [9.3863750e+04, 1.2732038e+05, 2.4983944e+05, 1.0000000e+00],\n",
              "       [9.1992390e+04, 1.3549507e+05, 2.5266493e+05, 0.0000000e+00],\n",
              "       [1.1994324e+05, 1.5654742e+05, 2.5651292e+05, 1.0000000e+00],\n",
              "       [1.1452361e+05, 1.2261684e+05, 2.6177623e+05, 2.0000000e+00],\n",
              "       [7.8013110e+04, 1.2159755e+05, 2.6434606e+05, 0.0000000e+00],\n",
              "       [9.4657160e+04, 1.4507758e+05, 2.8257431e+05, 2.0000000e+00],\n",
              "       [9.1749160e+04, 1.1417579e+05, 2.9491957e+05, 1.0000000e+00],\n",
              "       [8.6419700e+04, 1.5351411e+05, 0.0000000e+00, 2.0000000e+00],\n",
              "       [7.6253860e+04, 1.1386730e+05, 2.9866447e+05, 0.0000000e+00],\n",
              "       [7.8389470e+04, 1.5377343e+05, 2.9973729e+05, 2.0000000e+00],\n",
              "       [7.3994560e+04, 1.2278275e+05, 3.0331926e+05, 1.0000000e+00],\n",
              "       [6.7532530e+04, 1.0575103e+05, 3.0476873e+05, 1.0000000e+00],\n",
              "       [7.7044010e+04, 9.9281340e+04, 1.4057481e+05, 2.0000000e+00],\n",
              "       [6.4664710e+04, 1.3955316e+05, 1.3796262e+05, 0.0000000e+00],\n",
              "       [7.5328870e+04, 1.4413598e+05, 1.3405007e+05, 1.0000000e+00],\n",
              "       [7.2107600e+04, 1.2786455e+05, 3.5318381e+05, 2.0000000e+00],\n",
              "       [6.6051520e+04, 1.8264556e+05, 1.1814820e+05, 1.0000000e+00],\n",
              "       [6.5605480e+04, 1.5303206e+05, 1.0713838e+05, 2.0000000e+00],\n",
              "       [6.1994480e+04, 1.1564128e+05, 9.1131240e+04, 1.0000000e+00],\n",
              "       [6.1136380e+04, 1.5270192e+05, 8.8218230e+04, 2.0000000e+00],\n",
              "       [6.3408860e+04, 1.2921961e+05, 4.6085250e+04, 0.0000000e+00],\n",
              "       [5.5493950e+04, 1.0305749e+05, 2.1463481e+05, 1.0000000e+00],\n",
              "       [4.6426070e+04, 1.5769392e+05, 2.1079767e+05, 0.0000000e+00],\n",
              "       [4.6014020e+04, 8.5047440e+04, 2.0551764e+05, 2.0000000e+00],\n",
              "       [2.8663760e+04, 1.2705621e+05, 2.0112682e+05, 1.0000000e+00],\n",
              "       [4.4069950e+04, 5.1283140e+04, 1.9702942e+05, 0.0000000e+00],\n",
              "       [2.0229590e+04, 6.5947930e+04, 1.8526510e+05, 2.0000000e+00],\n",
              "       [3.8558510e+04, 8.2982090e+04, 1.7499930e+05, 0.0000000e+00],\n",
              "       [2.8754330e+04, 1.1854605e+05, 1.7279567e+05, 0.0000000e+00],\n",
              "       [2.7892920e+04, 8.4710770e+04, 1.6447071e+05, 1.0000000e+00],\n",
              "       [2.3640930e+04, 9.6189630e+04, 1.4800111e+05, 0.0000000e+00],\n",
              "       [1.5505730e+04, 1.2738230e+05, 3.5534170e+04, 2.0000000e+00],\n",
              "       [2.2177740e+04, 1.5480614e+05, 2.8334720e+04, 0.0000000e+00],\n",
              "       [1.0002300e+03, 1.2415304e+05, 1.9039300e+03, 2.0000000e+00],\n",
              "       [1.3154600e+03, 1.1581621e+05, 2.9711446e+05, 1.0000000e+00],\n",
              "       [0.0000000e+00, 1.3542692e+05, 0.0000000e+00, 0.0000000e+00],\n",
              "       [5.4205000e+02, 5.1743150e+04, 0.0000000e+00, 2.0000000e+00],\n",
              "       [0.0000000e+00, 1.1698380e+05, 4.5173060e+04, 0.0000000e+00],\n",
              "       [1.0067196e+05, 9.1790610e+04, 2.4974455e+05, 0.0000000e+00],\n",
              "       [9.3863750e+04, 1.2732038e+05, 2.4983944e+05, 1.0000000e+00],\n",
              "       [9.1992390e+04, 1.3549507e+05, 2.5266493e+05, 0.0000000e+00],\n",
              "       [1.1994324e+05, 1.5654742e+05, 2.5651292e+05, 1.0000000e+00],\n",
              "       [1.1452361e+05, 1.2261684e+05, 2.6177623e+05, 2.0000000e+00],\n",
              "       [7.8013110e+04, 1.2159755e+05, 2.6434606e+05, 0.0000000e+00],\n",
              "       [9.4657160e+04, 1.4507758e+05, 2.8257431e+05, 2.0000000e+00],\n",
              "       [9.1749160e+04, 1.1417579e+05, 2.9491957e+05, 1.0000000e+00],\n",
              "       [8.6419700e+04, 1.5351411e+05, 0.0000000e+00, 2.0000000e+00],\n",
              "       [7.6253860e+04, 1.1386730e+05, 2.9866447e+05, 0.0000000e+00],\n",
              "       [7.8389470e+04, 1.5377343e+05, 2.9973729e+05, 2.0000000e+00],\n",
              "       [7.3994560e+04, 1.2278275e+05, 3.0331926e+05, 1.0000000e+00],\n",
              "       [6.7532530e+04, 1.0575103e+05, 3.0476873e+05, 1.0000000e+00],\n",
              "       [7.7044010e+04, 9.9281340e+04, 1.4057481e+05, 2.0000000e+00],\n",
              "       [6.4664710e+04, 1.3955316e+05, 1.3796262e+05, 0.0000000e+00],\n",
              "       [7.5328870e+04, 1.4413598e+05, 1.3405007e+05, 1.0000000e+00],\n",
              "       [7.2107600e+04, 1.2786455e+05, 3.5318381e+05, 2.0000000e+00],\n",
              "       [6.6051520e+04, 1.8264556e+05, 1.1814820e+05, 1.0000000e+00],\n",
              "       [6.5605480e+04, 1.5303206e+05, 1.0713838e+05, 2.0000000e+00],\n",
              "       [6.1994480e+04, 1.1564128e+05, 9.1131240e+04, 2.0000000e+00],\n",
              "       [2.0229590e+04, 1.5270192e+05, 8.8218230e+04, 2.0000000e+00],\n",
              "       [6.3408860e+04, 1.2921961e+05, 4.6085250e+04, 0.0000000e+00],\n",
              "       [5.5493950e+04, 1.0305749e+05, 2.1463481e+05, 1.0000000e+00],\n",
              "       [4.6426070e+04, 1.5769392e+05, 2.1079767e+05, 2.0000000e+00],\n",
              "       [2.0229590e+04, 8.5047440e+04, 2.0551764e+05, 2.0000000e+00],\n",
              "       [2.8663760e+04, 1.2705621e+05, 2.0112682e+05, 1.0000000e+00],\n",
              "       [4.4069950e+04, 5.1283140e+04, 1.9702942e+05, 0.0000000e+00],\n",
              "       [2.0229590e+04, 6.5947930e+04, 1.8526510e+05, 2.0000000e+00],\n",
              "       [3.8558510e+04, 8.2982090e+04, 1.7499930e+05, 0.0000000e+00],\n",
              "       [2.8754330e+04, 1.1854605e+05, 1.7279567e+05, 0.0000000e+00],\n",
              "       [2.7892920e+04, 8.4710770e+04, 1.6447071e+05, 2.0000000e+00],\n",
              "       [2.3640930e+04, 9.6189630e+04, 1.4800111e+05, 0.0000000e+00],\n",
              "       [2.0229590e+04, 1.2738230e+05, 3.5534170e+04, 2.0000000e+00],\n",
              "       [2.2177740e+04, 1.5480614e+05, 2.8334720e+04, 0.0000000e+00],\n",
              "       [1.0002300e+03, 1.2415304e+05, 1.9039300e+03, 2.0000000e+00],\n",
              "       [1.3154600e+03, 1.1581621e+05, 2.9711446e+05, 1.0000000e+00],\n",
              "       [0.0000000e+00, 1.3542692e+05, 0.0000000e+00, 0.0000000e+00],\n",
              "       [5.4205000e+02, 5.1743150e+04, 0.0000000e+00, 2.0000000e+00],\n",
              "       [0.0000000e+00, 1.1698380e+05, 4.5173060e+04, 0.0000000e+00],\n",
              "       [1.6534920e+05, 1.3689780e+05, 4.7178410e+05, 2.0000000e+00],\n",
              "       [1.6259770e+05, 1.5137759e+05, 4.4389853e+05, 0.0000000e+00],\n",
              "       [1.5344151e+05, 1.0114555e+05, 4.0793454e+05, 1.0000000e+00],\n",
              "       [1.4437241e+05, 1.1867185e+05, 3.8319962e+05, 2.0000000e+00],\n",
              "       [1.4210734e+05, 9.1391770e+04, 3.6616842e+05, 1.0000000e+00],\n",
              "       [1.3187690e+05, 9.9814710e+04, 3.6286136e+05, 2.0000000e+00],\n",
              "       [1.3461546e+05, 1.4719887e+05, 1.2771682e+05, 0.0000000e+00],\n",
              "       [1.3029813e+05, 1.4553006e+05, 3.2387668e+05, 1.0000000e+00],\n",
              "       [1.2054252e+05, 1.4871895e+05, 3.1161329e+05, 2.0000000e+00],\n",
              "       [1.2333488e+05, 1.0867917e+05, 3.0498162e+05, 0.0000000e+00],\n",
              "       [1.0191308e+05, 1.1059411e+05, 2.2916095e+05, 1.0000000e+00],\n",
              "       [1.0067196e+05, 9.1790610e+04, 2.4974455e+05, 0.0000000e+00],\n",
              "       [9.3863750e+04, 1.2732038e+05, 2.4983944e+05, 1.0000000e+00],\n",
              "       [9.1992390e+04, 1.3549507e+05, 2.5266493e+05, 0.0000000e+00],\n",
              "       [1.1994324e+05, 1.5654742e+05, 2.5651292e+05, 1.0000000e+00],\n",
              "       [1.1452361e+05, 1.2261684e+05, 2.6177623e+05, 2.0000000e+00],\n",
              "       [7.8013110e+04, 1.2159755e+05, 2.6434606e+05, 0.0000000e+00],\n",
              "       [9.4657160e+04, 1.4507758e+05, 2.8257431e+05, 2.0000000e+00],\n",
              "       [9.1749160e+04, 1.1417579e+05, 2.9491957e+05, 1.0000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AhhM1uNmPIA1",
        "outputId": "d2a79fba-8d05-4490-fdf1-00ab014f7dd0"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[192261.83],\n",
              "       [191792.06],\n",
              "       [191050.39],\n",
              "       [182901.99],\n",
              "       [166187.94],\n",
              "       [156991.12],\n",
              "       [156122.51],\n",
              "       [155752.6 ],\n",
              "       [152211.77],\n",
              "       [149759.96],\n",
              "       [146121.95],\n",
              "       [144259.4 ],\n",
              "       [141585.52],\n",
              "       [134307.35],\n",
              "       [132602.65],\n",
              "       [129917.04],\n",
              "       [126992.93],\n",
              "       [125370.37],\n",
              "       [124266.9 ],\n",
              "       [122776.86],\n",
              "       [118474.03],\n",
              "       [111313.02],\n",
              "       [110352.25],\n",
              "       [108733.99],\n",
              "       [108552.04],\n",
              "       [107404.34],\n",
              "       [105733.54],\n",
              "       [105008.31],\n",
              "       [103282.38],\n",
              "       [101004.64],\n",
              "       [ 99937.59],\n",
              "       [ 97483.56],\n",
              "       [ 97427.84],\n",
              "       [ 96778.92],\n",
              "       [ 96712.8 ],\n",
              "       [ 96479.51],\n",
              "       [ 90708.19],\n",
              "       [ 89949.14],\n",
              "       [ 81229.06],\n",
              "       [ 81005.76],\n",
              "       [ 78239.91],\n",
              "       [ 77798.83],\n",
              "       [ 71498.49],\n",
              "       [ 69758.98],\n",
              "       [ 65200.33],\n",
              "       [ 64926.08],\n",
              "       [ 49490.75],\n",
              "       [ 42559.73],\n",
              "       [ 35673.41],\n",
              "       [ 14681.4 ],\n",
              "       [144259.4 ],\n",
              "       [141585.52],\n",
              "       [134307.35],\n",
              "       [132602.65],\n",
              "       [129917.04],\n",
              "       [126992.93],\n",
              "       [125370.37],\n",
              "       [124266.9 ],\n",
              "       [122776.86],\n",
              "       [118474.03],\n",
              "       [111313.02],\n",
              "       [110352.25],\n",
              "       [108733.99],\n",
              "       [108552.04],\n",
              "       [107404.34],\n",
              "       [105733.54],\n",
              "       [105008.31],\n",
              "       [103282.38],\n",
              "       [101004.64],\n",
              "       [ 99937.59],\n",
              "       [ 97483.56],\n",
              "       [ 97427.84],\n",
              "       [ 96778.92],\n",
              "       [ 96712.8 ],\n",
              "       [ 96479.51],\n",
              "       [ 90708.19],\n",
              "       [ 89949.14],\n",
              "       [ 81229.06],\n",
              "       [ 81005.76],\n",
              "       [ 78239.91],\n",
              "       [ 77798.83],\n",
              "       [ 71498.49],\n",
              "       [ 69758.98],\n",
              "       [ 65200.33],\n",
              "       [ 64926.08],\n",
              "       [ 49490.75],\n",
              "       [ 42559.73],\n",
              "       [ 35673.41],\n",
              "       [ 14681.4 ],\n",
              "       [192261.83],\n",
              "       [191792.06],\n",
              "       [191050.39],\n",
              "       [182901.99],\n",
              "       [166187.94],\n",
              "       [156991.12],\n",
              "       [156122.51],\n",
              "       [155752.6 ],\n",
              "       [152211.77],\n",
              "       [149759.96],\n",
              "       [146121.95],\n",
              "       [144259.4 ],\n",
              "       [141585.52],\n",
              "       [134307.35],\n",
              "       [132602.65],\n",
              "       [129917.04],\n",
              "       [126992.93],\n",
              "       [125370.37],\n",
              "       [124266.9 ]])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "F7juLeqUPKd-"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data (train & test data)\n",
        "\n",
        "xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.3,random_state=0)"
      ],
      "metadata": {
        "id": "LsLshWtIPYq8"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense"
      ],
      "metadata": {
        "id": "m21ly8BOPq5C"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating skeleton ANN model\n",
        "\n",
        "regressor = Sequential()\n",
        "regressor.add(Dense(4, activation='relu')) # Input\n",
        "regressor.add(Dense(12, activation='relu')) # 1st hid. layer\n",
        "regressor.add(Dense(8, activation='relu')) # 2nd hid. layer\n",
        "regressor.add(Dense(9, activation='relu')) # 3rd hid. layer\n",
        "regressor.add(Dense(1,activation='linear')) # output layer"
      ],
      "metadata": {
        "id": "kWMmdpeFPs_4"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Passing optimizers to the model\n",
        "\n",
        "regressor.compile(optimizer='adam',loss='mse',metrics=['mse'])"
      ],
      "metadata": {
        "id": "e0ckWPTER3HI"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Training the model\n",
        "\n",
        "regressor.fit(xtrain,ytrain,batch_size=10,epochs=300)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AUThDR5fS2Hq",
        "outputId": "dc436e5d-0a6f-42f7-9e88-ca3ea7d36891"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "8/8 [==============================] - 3s 3ms/step - loss: 39571910656.0000 - mse: 39571910656.0000\n",
            "Epoch 2/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 34689003520.0000 - mse: 34689003520.0000\n",
            "Epoch 3/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 30620788736.0000 - mse: 30620788736.0000\n",
            "Epoch 4/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 27486210048.0000 - mse: 27486210048.0000\n",
            "Epoch 5/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 24907386880.0000 - mse: 24907386880.0000\n",
            "Epoch 6/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 22866378752.0000 - mse: 22866378752.0000\n",
            "Epoch 7/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 21242994688.0000 - mse: 21242994688.0000\n",
            "Epoch 8/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 19888648192.0000 - mse: 19888648192.0000\n",
            "Epoch 9/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18804015104.0000 - mse: 18804015104.0000\n",
            "Epoch 10/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 17784582144.0000 - mse: 17784582144.0000\n",
            "Epoch 11/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 16815873024.0000 - mse: 16815873024.0000\n",
            "Epoch 12/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15838767104.0000 - mse: 15838767104.0000\n",
            "Epoch 13/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15399965696.0000 - mse: 15399965696.0000\n",
            "Epoch 14/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15145549824.0000 - mse: 15145549824.0000\n",
            "Epoch 15/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 14917442560.0000 - mse: 14917442560.0000\n",
            "Epoch 16/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14743351296.0000 - mse: 14743351296.0000\n",
            "Epoch 17/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14581569536.0000 - mse: 14581569536.0000\n",
            "Epoch 18/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14436535296.0000 - mse: 14436535296.0000\n",
            "Epoch 19/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14272870400.0000 - mse: 14272870400.0000\n",
            "Epoch 20/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 13821170688.0000 - mse: 13821170688.0000\n",
            "Epoch 21/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 13098289152.0000 - mse: 13098289152.0000\n",
            "Epoch 22/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 12192183296.0000 - mse: 12192183296.0000\n",
            "Epoch 23/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 11140422656.0000 - mse: 11140422656.0000\n",
            "Epoch 24/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 9924762624.0000 - mse: 9924762624.0000\n",
            "Epoch 25/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 8554673664.0000 - mse: 8554673664.0000\n",
            "Epoch 26/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 7181707264.0000 - mse: 7181707264.0000\n",
            "Epoch 27/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5742341632.0000 - mse: 5742341632.0000\n",
            "Epoch 28/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4421070336.0000 - mse: 4421070336.0000\n",
            "Epoch 29/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3183109120.0000 - mse: 3183109120.0000\n",
            "Epoch 30/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2205632256.0000 - mse: 2205632256.0000\n",
            "Epoch 31/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 1536059264.0000 - mse: 1536059264.0000\n",
            "Epoch 32/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 1215851136.0000 - mse: 1215851136.0000\n",
            "Epoch 33/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 1032415680.0000 - mse: 1032415680.0000\n",
            "Epoch 34/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 965361216.0000 - mse: 965361216.0000\n",
            "Epoch 35/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 904581696.0000 - mse: 904581568.0000\n",
            "Epoch 36/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 849124416.0000 - mse: 849124416.0000\n",
            "Epoch 37/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 796025664.0000 - mse: 796025664.0000\n",
            "Epoch 38/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 753228480.0000 - mse: 753228480.0000\n",
            "Epoch 39/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 700774848.0000 - mse: 700774848.0000\n",
            "Epoch 40/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 659691072.0000 - mse: 659691072.0000\n",
            "Epoch 41/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 624918272.0000 - mse: 624918272.0000\n",
            "Epoch 42/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 586258816.0000 - mse: 586258816.0000\n",
            "Epoch 43/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 548337856.0000 - mse: 548337856.0000\n",
            "Epoch 44/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 513737152.0000 - mse: 513737152.0000\n",
            "Epoch 45/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 479478240.0000 - mse: 479478240.0000\n",
            "Epoch 46/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 455020064.0000 - mse: 455020064.0000\n",
            "Epoch 47/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 435823264.0000 - mse: 435823264.0000\n",
            "Epoch 48/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 415583648.0000 - mse: 415583648.0000\n",
            "Epoch 49/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 402729248.0000 - mse: 402729248.0000\n",
            "Epoch 50/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 385506688.0000 - mse: 385506688.0000\n",
            "Epoch 51/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 374376736.0000 - mse: 374376736.0000\n",
            "Epoch 52/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 364614688.0000 - mse: 364614688.0000\n",
            "Epoch 53/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 353184896.0000 - mse: 353184896.0000\n",
            "Epoch 54/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 343974176.0000 - mse: 343974176.0000\n",
            "Epoch 55/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 335783360.0000 - mse: 335783360.0000\n",
            "Epoch 56/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 330639616.0000 - mse: 330639616.0000\n",
            "Epoch 57/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 325564544.0000 - mse: 325564544.0000\n",
            "Epoch 58/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 323793760.0000 - mse: 323793824.0000\n",
            "Epoch 59/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 319520288.0000 - mse: 319520288.0000\n",
            "Epoch 60/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 319259712.0000 - mse: 319259712.0000\n",
            "Epoch 61/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 315984800.0000 - mse: 315984800.0000\n",
            "Epoch 62/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 311920704.0000 - mse: 311920704.0000\n",
            "Epoch 63/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 310863040.0000 - mse: 310863040.0000\n",
            "Epoch 64/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 308562944.0000 - mse: 308562944.0000\n",
            "Epoch 65/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 306815488.0000 - mse: 306815488.0000\n",
            "Epoch 66/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 306047488.0000 - mse: 306047488.0000\n",
            "Epoch 67/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 303571328.0000 - mse: 303571328.0000\n",
            "Epoch 68/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 303113952.0000 - mse: 303113952.0000\n",
            "Epoch 69/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 299089632.0000 - mse: 299089632.0000\n",
            "Epoch 70/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 297672512.0000 - mse: 297672512.0000\n",
            "Epoch 71/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 295771936.0000 - mse: 295771936.0000\n",
            "Epoch 72/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 293357248.0000 - mse: 293357280.0000\n",
            "Epoch 73/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 289825632.0000 - mse: 289825632.0000\n",
            "Epoch 74/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 287038208.0000 - mse: 287038208.0000\n",
            "Epoch 75/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 287253792.0000 - mse: 287253792.0000\n",
            "Epoch 76/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 286095712.0000 - mse: 286095712.0000\n",
            "Epoch 77/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 284028640.0000 - mse: 284028640.0000\n",
            "Epoch 78/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 282493632.0000 - mse: 282493632.0000\n",
            "Epoch 79/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 278839392.0000 - mse: 278839392.0000\n",
            "Epoch 80/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 276350496.0000 - mse: 276350496.0000\n",
            "Epoch 81/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 275030752.0000 - mse: 275030752.0000\n",
            "Epoch 82/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 274323424.0000 - mse: 274323424.0000\n",
            "Epoch 83/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 274540256.0000 - mse: 274540256.0000\n",
            "Epoch 84/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 275837696.0000 - mse: 275837728.0000\n",
            "Epoch 85/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 273015232.0000 - mse: 273015232.0000\n",
            "Epoch 86/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 273101408.0000 - mse: 273101408.0000\n",
            "Epoch 87/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 270362528.0000 - mse: 270362528.0000\n",
            "Epoch 88/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 269438016.0000 - mse: 269438016.0000\n",
            "Epoch 89/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 268686912.0000 - mse: 268686912.0000\n",
            "Epoch 90/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 268286528.0000 - mse: 268286496.0000\n",
            "Epoch 91/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 268024656.0000 - mse: 268024656.0000\n",
            "Epoch 92/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 269220064.0000 - mse: 269220064.0000\n",
            "Epoch 93/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 266680272.0000 - mse: 266680272.0000\n",
            "Epoch 94/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 266049296.0000 - mse: 266049296.0000\n",
            "Epoch 95/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 265468800.0000 - mse: 265468800.0000\n",
            "Epoch 96/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 264526992.0000 - mse: 264526992.0000\n",
            "Epoch 97/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 263682464.0000 - mse: 263682464.0000\n",
            "Epoch 98/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 263472464.0000 - mse: 263472464.0000\n",
            "Epoch 99/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 263736608.0000 - mse: 263736608.0000\n",
            "Epoch 100/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 262112736.0000 - mse: 262112736.0000\n",
            "Epoch 101/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 262250336.0000 - mse: 262250336.0000\n",
            "Epoch 102/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 260941664.0000 - mse: 260941664.0000\n",
            "Epoch 103/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 260643232.0000 - mse: 260643232.0000\n",
            "Epoch 104/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 260703248.0000 - mse: 260703248.0000\n",
            "Epoch 105/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 260815664.0000 - mse: 260815664.0000\n",
            "Epoch 106/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 261089696.0000 - mse: 261089696.0000\n",
            "Epoch 107/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 259502592.0000 - mse: 259502592.0000\n",
            "Epoch 108/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 259756192.0000 - mse: 259756192.0000\n",
            "Epoch 109/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 258045600.0000 - mse: 258045600.0000\n",
            "Epoch 110/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 257107360.0000 - mse: 257107360.0000\n",
            "Epoch 111/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 256863168.0000 - mse: 256863168.0000\n",
            "Epoch 112/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 255767072.0000 - mse: 255767072.0000\n",
            "Epoch 113/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 256729968.0000 - mse: 256729936.0000\n",
            "Epoch 114/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 255155648.0000 - mse: 255155616.0000\n",
            "Epoch 115/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 255065040.0000 - mse: 255065040.0000\n",
            "Epoch 116/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 255253984.0000 - mse: 255253984.0000\n",
            "Epoch 117/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 255476208.0000 - mse: 255476208.0000\n",
            "Epoch 118/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 253255872.0000 - mse: 253255872.0000\n",
            "Epoch 119/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 252813232.0000 - mse: 252813232.0000\n",
            "Epoch 120/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 252888736.0000 - mse: 252888736.0000\n",
            "Epoch 121/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 252687120.0000 - mse: 252687120.0000\n",
            "Epoch 122/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 252464608.0000 - mse: 252464608.0000\n",
            "Epoch 123/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 251710224.0000 - mse: 251710224.0000\n",
            "Epoch 124/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 250942512.0000 - mse: 250942512.0000\n",
            "Epoch 125/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 250890320.0000 - mse: 250890320.0000\n",
            "Epoch 126/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 249787728.0000 - mse: 249787728.0000\n",
            "Epoch 127/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 249386224.0000 - mse: 249386224.0000\n",
            "Epoch 128/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 248562320.0000 - mse: 248562320.0000\n",
            "Epoch 129/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 247387472.0000 - mse: 247387472.0000\n",
            "Epoch 130/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 248868448.0000 - mse: 248868448.0000\n",
            "Epoch 131/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 247244176.0000 - mse: 247244176.0000\n",
            "Epoch 132/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 248052992.0000 - mse: 248052992.0000\n",
            "Epoch 133/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 246023584.0000 - mse: 246023584.0000\n",
            "Epoch 134/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 245899456.0000 - mse: 245899456.0000\n",
            "Epoch 135/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 245502640.0000 - mse: 245502640.0000\n",
            "Epoch 136/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 244430880.0000 - mse: 244430880.0000\n",
            "Epoch 137/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 247253872.0000 - mse: 247253888.0000\n",
            "Epoch 138/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 243457552.0000 - mse: 243457552.0000\n",
            "Epoch 139/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 244784992.0000 - mse: 244784992.0000\n",
            "Epoch 140/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 244899920.0000 - mse: 244899920.0000\n",
            "Epoch 141/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 243772000.0000 - mse: 243772000.0000\n",
            "Epoch 142/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 242811264.0000 - mse: 242811296.0000\n",
            "Epoch 143/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 244832608.0000 - mse: 244832608.0000\n",
            "Epoch 144/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 241629504.0000 - mse: 241629504.0000\n",
            "Epoch 145/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 241699584.0000 - mse: 241699584.0000\n",
            "Epoch 146/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 240394928.0000 - mse: 240394928.0000\n",
            "Epoch 147/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 240727600.0000 - mse: 240727600.0000\n",
            "Epoch 148/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 240804192.0000 - mse: 240804192.0000\n",
            "Epoch 149/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 239638800.0000 - mse: 239638800.0000\n",
            "Epoch 150/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 242342400.0000 - mse: 242342400.0000\n",
            "Epoch 151/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 238401152.0000 - mse: 238401152.0000\n",
            "Epoch 152/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 239307872.0000 - mse: 239307872.0000\n",
            "Epoch 153/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 236863456.0000 - mse: 236863456.0000\n",
            "Epoch 154/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 237019744.0000 - mse: 237019744.0000\n",
            "Epoch 155/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 237406560.0000 - mse: 237406560.0000\n",
            "Epoch 156/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 236085472.0000 - mse: 236085472.0000\n",
            "Epoch 157/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 236149856.0000 - mse: 236149856.0000\n",
            "Epoch 158/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 235055408.0000 - mse: 235055408.0000\n",
            "Epoch 159/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 235200752.0000 - mse: 235200752.0000\n",
            "Epoch 160/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 234109552.0000 - mse: 234109552.0000\n",
            "Epoch 161/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 234365088.0000 - mse: 234365088.0000\n",
            "Epoch 162/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 233713520.0000 - mse: 233713520.0000\n",
            "Epoch 163/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 233231104.0000 - mse: 233231104.0000\n",
            "Epoch 164/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 234305264.0000 - mse: 234305264.0000\n",
            "Epoch 165/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 233083104.0000 - mse: 233083104.0000\n",
            "Epoch 166/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 234145824.0000 - mse: 234145824.0000\n",
            "Epoch 167/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 233315648.0000 - mse: 233315648.0000\n",
            "Epoch 168/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 232026528.0000 - mse: 232026528.0000\n",
            "Epoch 169/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 231450656.0000 - mse: 231450656.0000\n",
            "Epoch 170/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 230868832.0000 - mse: 230868832.0000\n",
            "Epoch 171/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 231352016.0000 - mse: 231352016.0000\n",
            "Epoch 172/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 229046048.0000 - mse: 229046048.0000\n",
            "Epoch 173/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 229501712.0000 - mse: 229501712.0000\n",
            "Epoch 174/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 229711408.0000 - mse: 229711408.0000\n",
            "Epoch 175/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 234059344.0000 - mse: 234059344.0000\n",
            "Epoch 176/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 231674560.0000 - mse: 231674592.0000\n",
            "Epoch 177/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 227559408.0000 - mse: 227559408.0000\n",
            "Epoch 178/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 228150448.0000 - mse: 228150448.0000\n",
            "Epoch 179/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 227160544.0000 - mse: 227160544.0000\n",
            "Epoch 180/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 227293280.0000 - mse: 227293280.0000\n",
            "Epoch 181/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 225492528.0000 - mse: 225492496.0000\n",
            "Epoch 182/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 230247104.0000 - mse: 230247104.0000\n",
            "Epoch 183/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 224918480.0000 - mse: 224918480.0000\n",
            "Epoch 184/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 225743664.0000 - mse: 225743664.0000\n",
            "Epoch 185/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 224702496.0000 - mse: 224702512.0000\n",
            "Epoch 186/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 227028048.0000 - mse: 227028048.0000\n",
            "Epoch 187/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 225399600.0000 - mse: 225399600.0000\n",
            "Epoch 188/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 225001312.0000 - mse: 225001312.0000\n",
            "Epoch 189/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 222933360.0000 - mse: 222933360.0000\n",
            "Epoch 190/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 226407888.0000 - mse: 226407888.0000\n",
            "Epoch 191/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 223445152.0000 - mse: 223445152.0000\n",
            "Epoch 192/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 221903952.0000 - mse: 221903952.0000\n",
            "Epoch 193/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 226996256.0000 - mse: 226996256.0000\n",
            "Epoch 194/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 223669952.0000 - mse: 223669952.0000\n",
            "Epoch 195/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 222261488.0000 - mse: 222261488.0000\n",
            "Epoch 196/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 222906016.0000 - mse: 222906016.0000\n",
            "Epoch 197/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 220355824.0000 - mse: 220355824.0000\n",
            "Epoch 198/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 222951088.0000 - mse: 222951088.0000\n",
            "Epoch 199/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 221690512.0000 - mse: 221690544.0000\n",
            "Epoch 200/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 222660464.0000 - mse: 222660464.0000\n",
            "Epoch 201/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 219324624.0000 - mse: 219324624.0000\n",
            "Epoch 202/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 219254896.0000 - mse: 219254880.0000\n",
            "Epoch 203/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 220057120.0000 - mse: 220057120.0000\n",
            "Epoch 204/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 218528528.0000 - mse: 218528528.0000\n",
            "Epoch 205/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 218852128.0000 - mse: 218852128.0000\n",
            "Epoch 206/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 218621072.0000 - mse: 218621072.0000\n",
            "Epoch 207/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 217875184.0000 - mse: 217875184.0000\n",
            "Epoch 208/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 217622208.0000 - mse: 217622208.0000\n",
            "Epoch 209/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 217929008.0000 - mse: 217929008.0000\n",
            "Epoch 210/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 221682128.0000 - mse: 221682144.0000\n",
            "Epoch 211/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 216088992.0000 - mse: 216088992.0000\n",
            "Epoch 212/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 217918784.0000 - mse: 217918784.0000\n",
            "Epoch 213/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 217702176.0000 - mse: 217702176.0000\n",
            "Epoch 214/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 217308480.0000 - mse: 217308480.0000\n",
            "Epoch 215/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 215353024.0000 - mse: 215353024.0000\n",
            "Epoch 216/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 216171472.0000 - mse: 216171472.0000\n",
            "Epoch 217/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 214374848.0000 - mse: 214374848.0000\n",
            "Epoch 218/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 215919056.0000 - mse: 215919072.0000\n",
            "Epoch 219/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 214933168.0000 - mse: 214933184.0000\n",
            "Epoch 220/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 214962864.0000 - mse: 214962864.0000\n",
            "Epoch 221/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 215795664.0000 - mse: 215795664.0000\n",
            "Epoch 222/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 216803744.0000 - mse: 216803744.0000\n",
            "Epoch 223/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 213990080.0000 - mse: 213990080.0000\n",
            "Epoch 224/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 215203168.0000 - mse: 215203168.0000\n",
            "Epoch 225/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 213745488.0000 - mse: 213745488.0000\n",
            "Epoch 226/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 215243760.0000 - mse: 215243760.0000\n",
            "Epoch 227/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 214025008.0000 - mse: 214025008.0000\n",
            "Epoch 228/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212855152.0000 - mse: 212855152.0000\n",
            "Epoch 229/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 214100768.0000 - mse: 214100768.0000\n",
            "Epoch 230/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 213826656.0000 - mse: 213826656.0000\n",
            "Epoch 231/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 214596208.0000 - mse: 214596208.0000\n",
            "Epoch 232/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 213112224.0000 - mse: 213112224.0000\n",
            "Epoch 233/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212137728.0000 - mse: 212137728.0000\n",
            "Epoch 234/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 211558080.0000 - mse: 211558080.0000\n",
            "Epoch 235/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 212386080.0000 - mse: 212386080.0000\n",
            "Epoch 236/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212469984.0000 - mse: 212469984.0000\n",
            "Epoch 237/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 212287456.0000 - mse: 212287456.0000\n",
            "Epoch 238/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212204416.0000 - mse: 212204416.0000\n",
            "Epoch 239/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212499856.0000 - mse: 212499856.0000\n",
            "Epoch 240/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 211003200.0000 - mse: 211003200.0000\n",
            "Epoch 241/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212561504.0000 - mse: 212561504.0000\n",
            "Epoch 242/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211271712.0000 - mse: 211271712.0000\n",
            "Epoch 243/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211438960.0000 - mse: 211438960.0000\n",
            "Epoch 244/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211258512.0000 - mse: 211258512.0000\n",
            "Epoch 245/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211299024.0000 - mse: 211299024.0000\n",
            "Epoch 246/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212786416.0000 - mse: 212786416.0000\n",
            "Epoch 247/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 209302064.0000 - mse: 209302064.0000\n",
            "Epoch 248/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 215454416.0000 - mse: 215454416.0000\n",
            "Epoch 249/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 209524656.0000 - mse: 209524656.0000\n",
            "Epoch 250/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 221896144.0000 - mse: 221896144.0000\n",
            "Epoch 251/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 208536512.0000 - mse: 208536528.0000\n",
            "Epoch 252/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 212913520.0000 - mse: 212913520.0000\n",
            "Epoch 253/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211334480.0000 - mse: 211334480.0000\n",
            "Epoch 254/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 208431664.0000 - mse: 208431664.0000\n",
            "Epoch 255/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207962720.0000 - mse: 207962720.0000\n",
            "Epoch 256/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 208203824.0000 - mse: 208203824.0000\n",
            "Epoch 257/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207819408.0000 - mse: 207819408.0000\n",
            "Epoch 258/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 208358864.0000 - mse: 208358864.0000\n",
            "Epoch 259/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207136080.0000 - mse: 207136080.0000\n",
            "Epoch 260/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207584112.0000 - mse: 207584112.0000\n",
            "Epoch 261/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 208499856.0000 - mse: 208499856.0000\n",
            "Epoch 262/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 205978512.0000 - mse: 205978512.0000\n",
            "Epoch 263/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 206585200.0000 - mse: 206585200.0000\n",
            "Epoch 264/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 210605504.0000 - mse: 210605504.0000\n",
            "Epoch 265/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 206127152.0000 - mse: 206127152.0000\n",
            "Epoch 266/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 206493472.0000 - mse: 206493472.0000\n",
            "Epoch 267/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 207629472.0000 - mse: 207629472.0000\n",
            "Epoch 268/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 206196672.0000 - mse: 206196672.0000\n",
            "Epoch 269/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 210988544.0000 - mse: 210988544.0000\n",
            "Epoch 270/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 206338672.0000 - mse: 206338672.0000\n",
            "Epoch 271/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211100528.0000 - mse: 211100528.0000\n",
            "Epoch 272/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207618160.0000 - mse: 207618160.0000\n",
            "Epoch 273/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 204861600.0000 - mse: 204861616.0000\n",
            "Epoch 274/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 204410480.0000 - mse: 204410480.0000\n",
            "Epoch 275/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 205394912.0000 - mse: 205394912.0000\n",
            "Epoch 276/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 205219808.0000 - mse: 205219808.0000\n",
            "Epoch 277/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 205519152.0000 - mse: 205519152.0000\n",
            "Epoch 278/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 205083360.0000 - mse: 205083360.0000\n",
            "Epoch 279/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 205636208.0000 - mse: 205636208.0000\n",
            "Epoch 280/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 203454512.0000 - mse: 203454512.0000\n",
            "Epoch 281/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 203675520.0000 - mse: 203675520.0000\n",
            "Epoch 282/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 204308128.0000 - mse: 204308128.0000\n",
            "Epoch 283/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 204375760.0000 - mse: 204375760.0000\n",
            "Epoch 284/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 204373952.0000 - mse: 204373952.0000\n",
            "Epoch 285/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 203140960.0000 - mse: 203140960.0000\n",
            "Epoch 286/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207283920.0000 - mse: 207283920.0000\n",
            "Epoch 287/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 205964256.0000 - mse: 205964240.0000\n",
            "Epoch 288/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 203285328.0000 - mse: 203285328.0000\n",
            "Epoch 289/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 202855952.0000 - mse: 202855952.0000\n",
            "Epoch 290/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 201628080.0000 - mse: 201628080.0000\n",
            "Epoch 291/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 201855808.0000 - mse: 201855808.0000\n",
            "Epoch 292/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 203564272.0000 - mse: 203564272.0000\n",
            "Epoch 293/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 201709664.0000 - mse: 201709664.0000\n",
            "Epoch 294/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 202329888.0000 - mse: 202329888.0000\n",
            "Epoch 295/300\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 203783376.0000 - mse: 203783376.0000\n",
            "Epoch 296/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 211050640.0000 - mse: 211050640.0000\n",
            "Epoch 297/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 207143696.0000 - mse: 207143696.0000\n",
            "Epoch 298/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 201339856.0000 - mse: 201339856.0000\n",
            "Epoch 299/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 201358128.0000 - mse: 201358128.0000\n",
            "Epoch 300/300\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 201246608.0000 - mse: 201246608.0000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fbcf01248d0>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting the test data\n",
        "\n",
        "ypred = regressor.predict(xtest)"
      ],
      "metadata": {
        "id": "gpAH1_DTTbD9"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ypred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0de548JFT4my",
        "outputId": "2b984b4a-62b6-479e-9405-af7d9c9cdd12"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 58645.152],\n",
              "       [124420.93 ],\n",
              "       [ 81500.76 ],\n",
              "       [178275.4  ],\n",
              "       [ 95211.195],\n",
              "       [121441.305],\n",
              "       [128927.914],\n",
              "       [164703.86 ],\n",
              "       [118412.66 ],\n",
              "       [ 63993.867],\n",
              "       [105045.98 ],\n",
              "       [122012.34 ],\n",
              "       [ 58645.152],\n",
              "       [132716.9  ],\n",
              "       [ 75098.49 ],\n",
              "       [128871.9  ],\n",
              "       [128871.9  ],\n",
              "       [102588.336],\n",
              "       [ 90955.414],\n",
              "       [139972.14 ],\n",
              "       [151857.52 ],\n",
              "       [158027.77 ],\n",
              "       [109961.85 ],\n",
              "       [162784.95 ],\n",
              "       [ 92694.836],\n",
              "       [174184.5  ],\n",
              "       [129627.46 ],\n",
              "       [ 24667.703],\n",
              "       [ 87952.07 ],\n",
              "       [147822.1  ],\n",
              "       [ 71321.74 ],\n",
              "       [204538.8  ],\n",
              "       [202889.   ]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TKpmK12T58r",
        "outputId": "5d693ca6-21e7-4e94-8574-9ecde6f7b4a3"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 64926.08],\n",
              "       [146121.95],\n",
              "       [ 90708.19],\n",
              "       [191050.39],\n",
              "       [108552.04],\n",
              "       [144259.4 ],\n",
              "       [124266.9 ],\n",
              "       [155752.6 ],\n",
              "       [126992.93],\n",
              "       [ 42559.73],\n",
              "       [101004.64],\n",
              "       [110352.25],\n",
              "       [ 64926.08],\n",
              "       [111313.02],\n",
              "       [ 89949.14],\n",
              "       [134307.35],\n",
              "       [134307.35],\n",
              "       [ 96712.8 ],\n",
              "       [ 49490.75],\n",
              "       [129917.04],\n",
              "       [132602.65],\n",
              "       [152211.77],\n",
              "       [105733.54],\n",
              "       [166187.94],\n",
              "       [ 96778.92],\n",
              "       [182901.99],\n",
              "       [105008.31],\n",
              "       [ 35673.41],\n",
              "       [ 99937.59],\n",
              "       [156122.51],\n",
              "       [ 81005.76],\n",
              "       [192261.83],\n",
              "       [191792.06]])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Comparing actual ytest values with predicted values\n",
        "\n",
        "pd.DataFrame({'Actual values':ytest.flatten(),\n",
        "              'Predicted values':ypred.flatten()})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0pUlW8sQUAAe",
        "outputId": "056cc358-01f4-4d4d-cea2-98622f6fde5d"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Actual values  Predicted values\n",
              "0        64926.08      58645.152344\n",
              "1       146121.95     124420.929688\n",
              "2        90708.19      81500.757812\n",
              "3       191050.39     178275.406250\n",
              "4       108552.04      95211.195312\n",
              "5       144259.40     121441.304688\n",
              "6       124266.90     128927.914062\n",
              "7       155752.60     164703.859375\n",
              "8       126992.93     118412.656250\n",
              "9        42559.73      63993.867188\n",
              "10      101004.64     105045.976562\n",
              "11      110352.25     122012.343750\n",
              "12       64926.08      58645.152344\n",
              "13      111313.02     132716.906250\n",
              "14       89949.14      75098.492188\n",
              "15      134307.35     128871.898438\n",
              "16      134307.35     128871.898438\n",
              "17       96712.80     102588.335938\n",
              "18       49490.75      90955.414062\n",
              "19      129917.04     139972.140625\n",
              "20      132602.65     151857.515625\n",
              "21      152211.77     158027.765625\n",
              "22      105733.54     109961.851562\n",
              "23      166187.94     162784.953125\n",
              "24       96778.92      92694.835938\n",
              "25      182901.99     174184.500000\n",
              "26      105008.31     129627.460938\n",
              "27       35673.41      24667.703125\n",
              "28       99937.59      87952.070312\n",
              "29      156122.51     147822.093750\n",
              "30       81005.76      71321.742188\n",
              "31      192261.83     204538.796875\n",
              "32      191792.06     202889.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-82a329de-73fd-415b-b4a8-ad421e7ef619\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Actual values</th>\n",
              "      <th>Predicted values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>64926.08</td>\n",
              "      <td>58645.152344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>146121.95</td>\n",
              "      <td>124420.929688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>90708.19</td>\n",
              "      <td>81500.757812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>191050.39</td>\n",
              "      <td>178275.406250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>108552.04</td>\n",
              "      <td>95211.195312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>144259.40</td>\n",
              "      <td>121441.304688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>124266.90</td>\n",
              "      <td>128927.914062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>155752.60</td>\n",
              "      <td>164703.859375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>126992.93</td>\n",
              "      <td>118412.656250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>42559.73</td>\n",
              "      <td>63993.867188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>101004.64</td>\n",
              "      <td>105045.976562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>110352.25</td>\n",
              "      <td>122012.343750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>64926.08</td>\n",
              "      <td>58645.152344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>111313.02</td>\n",
              "      <td>132716.906250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>89949.14</td>\n",
              "      <td>75098.492188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>134307.35</td>\n",
              "      <td>128871.898438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>134307.35</td>\n",
              "      <td>128871.898438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>96712.80</td>\n",
              "      <td>102588.335938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>49490.75</td>\n",
              "      <td>90955.414062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>129917.04</td>\n",
              "      <td>139972.140625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>132602.65</td>\n",
              "      <td>151857.515625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>152211.77</td>\n",
              "      <td>158027.765625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>105733.54</td>\n",
              "      <td>109961.851562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>166187.94</td>\n",
              "      <td>162784.953125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>96778.92</td>\n",
              "      <td>92694.835938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>182901.99</td>\n",
              "      <td>174184.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>105008.31</td>\n",
              "      <td>129627.460938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>35673.41</td>\n",
              "      <td>24667.703125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>99937.59</td>\n",
              "      <td>87952.070312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>156122.51</td>\n",
              "      <td>147822.093750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>81005.76</td>\n",
              "      <td>71321.742188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>192261.83</td>\n",
              "      <td>204538.796875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>191792.06</td>\n",
              "      <td>202889.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82a329de-73fd-415b-b4a8-ad421e7ef619')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-82a329de-73fd-415b-b4a8-ad421e7ef619 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-82a329de-73fd-415b-b4a8-ad421e7ef619');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "pwsFauu6UQSI"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# checking accuracy\n",
        "\n",
        "r2_score(ytest,ypred)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qqR9RIHdVTBa",
        "outputId": "c7200dda-69cc-410e-dc07-6adff7c1f164"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "88.24371637148441"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regressor.predict([[1234543.34,53343445.34,5645575.3,2]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pFV4fD1iVbqV",
        "outputId": "7bc4b45b-6881-4c22-d1f4-3ceb389f75f0"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[24451180.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Saving the ANN model weights (it can be used whenever we want... each and every time no need to train model)\n",
        "\n",
        "regressor.save('regressor.h5')"
      ],
      "metadata": {
        "id": "6zwyzUmIWHnK"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VNHRUIiHXe82"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Tjeu_U8IZ_vO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading the dataset\n",
        "\n",
        "data = pd.read_csv('/content/Breast Cancer Wisconsin (Diagnostic) Data Set.csv')"
      ],
      "metadata": {
        "id": "8TB0X-ykZ_pH"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualizing 1st 5 data\n",
        "\n",
        "# output column is diagnosis (M = malignant, B = benign)\n",
        "\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "qCmHt0zmagi-",
        "outputId": "e2c9299e-ef27-4b74-e62d-ac38a2d68917"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0    842302         M        17.99         10.38          122.80     1001.0   \n",
              "1    842517         M        20.57         17.77          132.90     1326.0   \n",
              "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
              "3  84348301         M        11.42         20.38           77.58      386.1   \n",
              "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
              "\n",
              "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0          0.11840           0.27760          0.3001              0.14710   \n",
              "1          0.08474           0.07864          0.0869              0.07017   \n",
              "2          0.10960           0.15990          0.1974              0.12790   \n",
              "3          0.14250           0.28390          0.2414              0.10520   \n",
              "4          0.10030           0.13280          0.1980              0.10430   \n",
              "\n",
              "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
              "0  ...          17.33           184.60      2019.0            0.1622   \n",
              "1  ...          23.41           158.80      1956.0            0.1238   \n",
              "2  ...          25.53           152.50      1709.0            0.1444   \n",
              "3  ...          26.50            98.87       567.7            0.2098   \n",
              "4  ...          16.67           152.20      1575.0            0.1374   \n",
              "\n",
              "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
              "0             0.6656           0.7119                0.2654          0.4601   \n",
              "1             0.1866           0.2416                0.1860          0.2750   \n",
              "2             0.4245           0.4504                0.2430          0.3613   \n",
              "3             0.8663           0.6869                0.2575          0.6638   \n",
              "4             0.2050           0.4000                0.1625          0.2364   \n",
              "\n",
              "   fractal_dimension_worst  Unnamed: 32  \n",
              "0                  0.11890          NaN  \n",
              "1                  0.08902          NaN  \n",
              "2                  0.08758          NaN  \n",
              "3                  0.17300          NaN  \n",
              "4                  0.07678          NaN  \n",
              "\n",
              "[5 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-abf0c2f8-d6b3-4523-a6fc-ffd16212e797\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <th>Unnamed: 32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>...</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>...</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>...</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>...</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>...</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 33 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abf0c2f8-d6b3-4523-a6fc-ffd16212e797')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-abf0c2f8-d6b3-4523-a6fc-ffd16212e797 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-abf0c2f8-d6b3-4523-a6fc-ffd16212e797');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for data types\n",
        "\n",
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v08YnwKlalIK",
        "outputId": "ef264c3e-34cd-481f-c591-a213d8630343"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 569 entries, 0 to 568\n",
            "Data columns (total 33 columns):\n",
            " #   Column                   Non-Null Count  Dtype  \n",
            "---  ------                   --------------  -----  \n",
            " 0   id                       569 non-null    int64  \n",
            " 1   diagnosis                569 non-null    object \n",
            " 2   radius_mean              569 non-null    float64\n",
            " 3   texture_mean             569 non-null    float64\n",
            " 4   perimeter_mean           569 non-null    float64\n",
            " 5   area_mean                569 non-null    float64\n",
            " 6   smoothness_mean          569 non-null    float64\n",
            " 7   compactness_mean         569 non-null    float64\n",
            " 8   concavity_mean           569 non-null    float64\n",
            " 9   concave points_mean      569 non-null    float64\n",
            " 10  symmetry_mean            569 non-null    float64\n",
            " 11  fractal_dimension_mean   569 non-null    float64\n",
            " 12  radius_se                569 non-null    float64\n",
            " 13  texture_se               569 non-null    float64\n",
            " 14  perimeter_se             569 non-null    float64\n",
            " 15  area_se                  569 non-null    float64\n",
            " 16  smoothness_se            569 non-null    float64\n",
            " 17  compactness_se           569 non-null    float64\n",
            " 18  concavity_se             569 non-null    float64\n",
            " 19  concave points_se        569 non-null    float64\n",
            " 20  symmetry_se              569 non-null    float64\n",
            " 21  fractal_dimension_se     569 non-null    float64\n",
            " 22  radius_worst             569 non-null    float64\n",
            " 23  texture_worst            569 non-null    float64\n",
            " 24  perimeter_worst          569 non-null    float64\n",
            " 25  area_worst               569 non-null    float64\n",
            " 26  smoothness_worst         569 non-null    float64\n",
            " 27  compactness_worst        569 non-null    float64\n",
            " 28  concavity_worst          569 non-null    float64\n",
            " 29  concave points_worst     569 non-null    float64\n",
            " 30  symmetry_worst           569 non-null    float64\n",
            " 31  fractal_dimension_worst  569 non-null    float64\n",
            " 32  Unnamed: 32              0 non-null      float64\n",
            "dtypes: float64(31), int64(1), object(1)\n",
            "memory usage: 146.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for null values\n",
        "\n",
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mbkjQGpTbA-Q",
        "outputId": "c782cdfe-48a0-40e5-8628-015edea26acc"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                           0\n",
              "diagnosis                    0\n",
              "radius_mean                  0\n",
              "texture_mean                 0\n",
              "perimeter_mean               0\n",
              "area_mean                    0\n",
              "smoothness_mean              0\n",
              "compactness_mean             0\n",
              "concavity_mean               0\n",
              "concave points_mean          0\n",
              "symmetry_mean                0\n",
              "fractal_dimension_mean       0\n",
              "radius_se                    0\n",
              "texture_se                   0\n",
              "perimeter_se                 0\n",
              "area_se                      0\n",
              "smoothness_se                0\n",
              "compactness_se               0\n",
              "concavity_se                 0\n",
              "concave points_se            0\n",
              "symmetry_se                  0\n",
              "fractal_dimension_se         0\n",
              "radius_worst                 0\n",
              "texture_worst                0\n",
              "perimeter_worst              0\n",
              "area_worst                   0\n",
              "smoothness_worst             0\n",
              "compactness_worst            0\n",
              "concavity_worst              0\n",
              "concave points_worst         0\n",
              "symmetry_worst               0\n",
              "fractal_dimension_worst      0\n",
              "Unnamed: 32                569\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop unwanted columns\n",
        "\n",
        "data.drop(['Unnamed: 32','id'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "u6uG4jOIbJI8"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "O7NAAH0ob94a",
        "outputId": "5683ed69-4a28-4253-a0f9-cc37aba621c9"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0         M        17.99         10.38          122.80     1001.0   \n",
              "1         M        20.57         17.77          132.90     1326.0   \n",
              "2         M        19.69         21.25          130.00     1203.0   \n",
              "3         M        11.42         20.38           77.58      386.1   \n",
              "4         M        20.29         14.34          135.10     1297.0   \n",
              "\n",
              "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0          0.11840           0.27760          0.3001              0.14710   \n",
              "1          0.08474           0.07864          0.0869              0.07017   \n",
              "2          0.10960           0.15990          0.1974              0.12790   \n",
              "3          0.14250           0.28390          0.2414              0.10520   \n",
              "4          0.10030           0.13280          0.1980              0.10430   \n",
              "\n",
              "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
              "0         0.2419  ...         25.38          17.33           184.60   \n",
              "1         0.1812  ...         24.99          23.41           158.80   \n",
              "2         0.2069  ...         23.57          25.53           152.50   \n",
              "3         0.2597  ...         14.91          26.50            98.87   \n",
              "4         0.1809  ...         22.54          16.67           152.20   \n",
              "\n",
              "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "0      2019.0            0.1622             0.6656           0.7119   \n",
              "1      1956.0            0.1238             0.1866           0.2416   \n",
              "2      1709.0            0.1444             0.4245           0.4504   \n",
              "3       567.7            0.2098             0.8663           0.6869   \n",
              "4      1575.0            0.1374             0.2050           0.4000   \n",
              "\n",
              "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
              "0                0.2654          0.4601                  0.11890  \n",
              "1                0.1860          0.2750                  0.08902  \n",
              "2                0.2430          0.3613                  0.08758  \n",
              "3                0.2575          0.6638                  0.17300  \n",
              "4                0.1625          0.2364                  0.07678  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ffc75ac5-61cc-4708-8d3b-be80c80cf7f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>symmetry_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>...</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>...</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>...</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>...</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>...</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffc75ac5-61cc-4708-8d3b-be80c80cf7f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ffc75ac5-61cc-4708-8d3b-be80c80cf7f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ffc75ac5-61cc-4708-8d3b-be80c80cf7f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data (independent & dependent variables)\n",
        "\n",
        "x = data.drop(['diagnosis'],axis=1)\n",
        "y = data['diagnosis']"
      ],
      "metadata": {
        "id": "0Ltn-0G5cumU"
      },
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Transforming values\n",
        "\n",
        "le2 = LabelEncoder()\n",
        "y = le2.fit_transform(data['diagnosis'])"
      ],
      "metadata": {
        "id": "EvyuJegkcBX8"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D9ryuI4ldLV7",
        "outputId": "a88be334-9ad4-4f89-9ad5-9c0d7bfb5495"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1,\n",
              "       0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1,\n",
              "       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1,\n",
              "       1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
              "       0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1,\n",
              "       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,\n",
              "       1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n",
              "       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n",
              "       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n",
              "       0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
              "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,\n",
              "       0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data (train & test data)\n",
        "\n",
        "xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.3,random_state=0)"
      ],
      "metadata": {
        "id": "-TcY83pKdMBp"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fThhQRtSde7O",
        "outputId": "4e614075-99fc-43d5-d1c1-41ce235b0638"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(398, 30)"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating skeleton ANN model\n",
        "\n",
        "classification = Sequential()\n",
        "classification.add(Dense(30, activation='relu')) # Input\n",
        "classification.add(Dense(128, activation='relu')) # 1st hid. layer\n",
        "classification.add(Dense(64, activation='relu')) # 2nd hid. layer\n",
        "classification.add(Dense(32, activation='relu')) # 3rd hid. layer\n",
        "classification.add(Dense(1,activation='sigmoid')) # output layer"
      ],
      "metadata": {
        "id": "Y0L7pc5QdXYR"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Passing optimizers to the model\n",
        "\n",
        "classification.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "xi8xQNAFd67f"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Training the model\n",
        "\n",
        "classification.fit(xtrain,ytrain,batch_size=10,epochs=300)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8IjvExwEeRGJ",
        "outputId": "884f1de8-fcc8-4ab4-cd44-e88011d4977a"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "40/40 [==============================] - 1s 3ms/step - loss: 3.2579 - accuracy: 0.6457\n",
            "Epoch 2/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.4646 - accuracy: 0.8643\n",
            "Epoch 3/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3201 - accuracy: 0.9020\n",
            "Epoch 4/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.8878 - accuracy: 0.7965\n",
            "Epoch 5/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.5057 - accuracy: 0.8794\n",
            "Epoch 6/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3011 - accuracy: 0.9020\n",
            "Epoch 7/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3283 - accuracy: 0.8844\n",
            "Epoch 8/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2798 - accuracy: 0.9045\n",
            "Epoch 9/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2967 - accuracy: 0.8995\n",
            "Epoch 10/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2762 - accuracy: 0.8945\n",
            "Epoch 11/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.4318 - accuracy: 0.8719\n",
            "Epoch 12/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 1.2162 - accuracy: 0.7889\n",
            "Epoch 13/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.6762 - accuracy: 0.8442\n",
            "Epoch 14/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3543 - accuracy: 0.8894\n",
            "Epoch 15/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2595 - accuracy: 0.9070\n",
            "Epoch 16/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2753 - accuracy: 0.9020\n",
            "Epoch 17/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2036 - accuracy: 0.9271\n",
            "Epoch 18/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.5354 - accuracy: 0.8467\n",
            "Epoch 19/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3243 - accuracy: 0.8970\n",
            "Epoch 20/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2505 - accuracy: 0.9196\n",
            "Epoch 21/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3164 - accuracy: 0.8869\n",
            "Epoch 22/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2584 - accuracy: 0.9070\n",
            "Epoch 23/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2471 - accuracy: 0.9045\n",
            "Epoch 24/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2889 - accuracy: 0.8995\n",
            "Epoch 25/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2840 - accuracy: 0.8920\n",
            "Epoch 26/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3485 - accuracy: 0.8819\n",
            "Epoch 27/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2033 - accuracy: 0.9171\n",
            "Epoch 28/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3286 - accuracy: 0.8794\n",
            "Epoch 29/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2365 - accuracy: 0.9070\n",
            "Epoch 30/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2003 - accuracy: 0.9372\n",
            "Epoch 31/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2807 - accuracy: 0.9171\n",
            "Epoch 32/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2419 - accuracy: 0.9146\n",
            "Epoch 33/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2494 - accuracy: 0.9146\n",
            "Epoch 34/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3027 - accuracy: 0.8869\n",
            "Epoch 35/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2327 - accuracy: 0.9070\n",
            "Epoch 36/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3962 - accuracy: 0.8668\n",
            "Epoch 37/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3048 - accuracy: 0.8995\n",
            "Epoch 38/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2110 - accuracy: 0.9171\n",
            "Epoch 39/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3497 - accuracy: 0.8920\n",
            "Epoch 40/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.2182 - accuracy: 0.9196\n",
            "Epoch 41/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1975 - accuracy: 0.9121\n",
            "Epoch 42/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2574 - accuracy: 0.9070\n",
            "Epoch 43/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2722 - accuracy: 0.9095\n",
            "Epoch 44/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2473 - accuracy: 0.9221\n",
            "Epoch 45/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2942 - accuracy: 0.9020\n",
            "Epoch 46/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2527 - accuracy: 0.9121\n",
            "Epoch 47/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2805 - accuracy: 0.9045\n",
            "Epoch 48/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1871 - accuracy: 0.9221\n",
            "Epoch 49/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1727 - accuracy: 0.9347\n",
            "Epoch 50/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2275 - accuracy: 0.8995\n",
            "Epoch 51/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2441 - accuracy: 0.9196\n",
            "Epoch 52/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.3276 - accuracy: 0.9020\n",
            "Epoch 53/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2288 - accuracy: 0.9171\n",
            "Epoch 54/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1880 - accuracy: 0.9271\n",
            "Epoch 55/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2195 - accuracy: 0.9196\n",
            "Epoch 56/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2813 - accuracy: 0.9020\n",
            "Epoch 57/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2798 - accuracy: 0.9095\n",
            "Epoch 58/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2362 - accuracy: 0.9146\n",
            "Epoch 59/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2141 - accuracy: 0.9171\n",
            "Epoch 60/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2241 - accuracy: 0.9121\n",
            "Epoch 61/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2249 - accuracy: 0.9070\n",
            "Epoch 62/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1948 - accuracy: 0.9221\n",
            "Epoch 63/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2042 - accuracy: 0.9146\n",
            "Epoch 64/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1743 - accuracy: 0.9221\n",
            "Epoch 65/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2616 - accuracy: 0.8869\n",
            "Epoch 66/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1677 - accuracy: 0.9347\n",
            "Epoch 67/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1772 - accuracy: 0.9322\n",
            "Epoch 68/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1724 - accuracy: 0.9322\n",
            "Epoch 69/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1635 - accuracy: 0.9221\n",
            "Epoch 70/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1883 - accuracy: 0.9196\n",
            "Epoch 71/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1851 - accuracy: 0.9171\n",
            "Epoch 72/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2012 - accuracy: 0.9246\n",
            "Epoch 73/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1693 - accuracy: 0.9171\n",
            "Epoch 74/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2794 - accuracy: 0.9070\n",
            "Epoch 75/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1623 - accuracy: 0.9246\n",
            "Epoch 76/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2218 - accuracy: 0.9020\n",
            "Epoch 77/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2574 - accuracy: 0.8970\n",
            "Epoch 78/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2216 - accuracy: 0.9121\n",
            "Epoch 79/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1571 - accuracy: 0.9271\n",
            "Epoch 80/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1612 - accuracy: 0.9296\n",
            "Epoch 81/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1519 - accuracy: 0.9372\n",
            "Epoch 82/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1894 - accuracy: 0.9296\n",
            "Epoch 83/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1865 - accuracy: 0.9296\n",
            "Epoch 84/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1453 - accuracy: 0.9347\n",
            "Epoch 85/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1548 - accuracy: 0.9422\n",
            "Epoch 86/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1741 - accuracy: 0.9296\n",
            "Epoch 87/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1534 - accuracy: 0.9322\n",
            "Epoch 88/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1742 - accuracy: 0.9246\n",
            "Epoch 89/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1797 - accuracy: 0.9221\n",
            "Epoch 90/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2393 - accuracy: 0.8945\n",
            "Epoch 91/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1800 - accuracy: 0.9121\n",
            "Epoch 92/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2518 - accuracy: 0.9045\n",
            "Epoch 93/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2315 - accuracy: 0.9146\n",
            "Epoch 94/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1487 - accuracy: 0.9322\n",
            "Epoch 95/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1544 - accuracy: 0.9397\n",
            "Epoch 96/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1887 - accuracy: 0.9271\n",
            "Epoch 97/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1855 - accuracy: 0.9221\n",
            "Epoch 98/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1911 - accuracy: 0.9171\n",
            "Epoch 99/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1768 - accuracy: 0.9045\n",
            "Epoch 100/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1761 - accuracy: 0.9146\n",
            "Epoch 101/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1348 - accuracy: 0.9397\n",
            "Epoch 102/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1491 - accuracy: 0.9347\n",
            "Epoch 103/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1559 - accuracy: 0.9322\n",
            "Epoch 104/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1600 - accuracy: 0.9246\n",
            "Epoch 105/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1540 - accuracy: 0.9347\n",
            "Epoch 106/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1614 - accuracy: 0.9397\n",
            "Epoch 107/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1668 - accuracy: 0.9322\n",
            "Epoch 108/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1312 - accuracy: 0.9472\n",
            "Epoch 109/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1363 - accuracy: 0.9397\n",
            "Epoch 110/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1763 - accuracy: 0.9372\n",
            "Epoch 111/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1643 - accuracy: 0.9322\n",
            "Epoch 112/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1652 - accuracy: 0.9296\n",
            "Epoch 113/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1214 - accuracy: 0.9422\n",
            "Epoch 114/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1285 - accuracy: 0.9372\n",
            "Epoch 115/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1380 - accuracy: 0.9347\n",
            "Epoch 116/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1505 - accuracy: 0.9347\n",
            "Epoch 117/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1624 - accuracy: 0.9422\n",
            "Epoch 118/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1496 - accuracy: 0.9422\n",
            "Epoch 119/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1373 - accuracy: 0.9447\n",
            "Epoch 120/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2761 - accuracy: 0.8970\n",
            "Epoch 121/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1770 - accuracy: 0.9271\n",
            "Epoch 122/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1956 - accuracy: 0.9221\n",
            "Epoch 123/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1516 - accuracy: 0.9296\n",
            "Epoch 124/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1587 - accuracy: 0.9221\n",
            "Epoch 125/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1463 - accuracy: 0.9322\n",
            "Epoch 126/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1307 - accuracy: 0.9397\n",
            "Epoch 127/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1850 - accuracy: 0.9322\n",
            "Epoch 128/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1536 - accuracy: 0.9347\n",
            "Epoch 129/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1387 - accuracy: 0.9422\n",
            "Epoch 130/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1290 - accuracy: 0.9447\n",
            "Epoch 131/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1366 - accuracy: 0.9422\n",
            "Epoch 132/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2436 - accuracy: 0.9246\n",
            "Epoch 133/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1348 - accuracy: 0.9296\n",
            "Epoch 134/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1506 - accuracy: 0.9447\n",
            "Epoch 135/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1459 - accuracy: 0.9347\n",
            "Epoch 136/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1276 - accuracy: 0.9548\n",
            "Epoch 137/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1281 - accuracy: 0.9472\n",
            "Epoch 138/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1322 - accuracy: 0.9322\n",
            "Epoch 139/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1263 - accuracy: 0.9523\n",
            "Epoch 140/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1330 - accuracy: 0.9372\n",
            "Epoch 141/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1187 - accuracy: 0.9497\n",
            "Epoch 142/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1604 - accuracy: 0.9472\n",
            "Epoch 143/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1588 - accuracy: 0.9296\n",
            "Epoch 144/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1577 - accuracy: 0.9296\n",
            "Epoch 145/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1224 - accuracy: 0.9372\n",
            "Epoch 146/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1599 - accuracy: 0.9221\n",
            "Epoch 147/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1385 - accuracy: 0.9372\n",
            "Epoch 148/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1345 - accuracy: 0.9472\n",
            "Epoch 149/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1326 - accuracy: 0.9422\n",
            "Epoch 150/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1403 - accuracy: 0.9296\n",
            "Epoch 151/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1181 - accuracy: 0.9472\n",
            "Epoch 152/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1325 - accuracy: 0.9322\n",
            "Epoch 153/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1372 - accuracy: 0.9447\n",
            "Epoch 154/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1314 - accuracy: 0.9447\n",
            "Epoch 155/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1425 - accuracy: 0.9472\n",
            "Epoch 156/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1231 - accuracy: 0.9523\n",
            "Epoch 157/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1438 - accuracy: 0.9322\n",
            "Epoch 158/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1954 - accuracy: 0.9372\n",
            "Epoch 159/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1728 - accuracy: 0.9296\n",
            "Epoch 160/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1146 - accuracy: 0.9447\n",
            "Epoch 161/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1274 - accuracy: 0.9472\n",
            "Epoch 162/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1547 - accuracy: 0.9447\n",
            "Epoch 163/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1380 - accuracy: 0.9422\n",
            "Epoch 164/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2007 - accuracy: 0.9221\n",
            "Epoch 165/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1728 - accuracy: 0.9246\n",
            "Epoch 166/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1252 - accuracy: 0.9372\n",
            "Epoch 167/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1349 - accuracy: 0.9447\n",
            "Epoch 168/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1397 - accuracy: 0.9322\n",
            "Epoch 169/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1296 - accuracy: 0.9372\n",
            "Epoch 170/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1196 - accuracy: 0.9472\n",
            "Epoch 171/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1112 - accuracy: 0.9472\n",
            "Epoch 172/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1377 - accuracy: 0.9497\n",
            "Epoch 173/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1161 - accuracy: 0.9497\n",
            "Epoch 174/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1436 - accuracy: 0.9322\n",
            "Epoch 175/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1688 - accuracy: 0.9246\n",
            "Epoch 176/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1317 - accuracy: 0.9548\n",
            "Epoch 177/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1158 - accuracy: 0.9472\n",
            "Epoch 178/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1125 - accuracy: 0.9472\n",
            "Epoch 179/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1113 - accuracy: 0.9548\n",
            "Epoch 180/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1118 - accuracy: 0.9447\n",
            "Epoch 181/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1270 - accuracy: 0.9497\n",
            "Epoch 182/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1201 - accuracy: 0.9548\n",
            "Epoch 183/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1146 - accuracy: 0.9372\n",
            "Epoch 184/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1710 - accuracy: 0.9372\n",
            "Epoch 185/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1141 - accuracy: 0.9497\n",
            "Epoch 186/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1353 - accuracy: 0.9497\n",
            "Epoch 187/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1661 - accuracy: 0.9271\n",
            "Epoch 188/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1126 - accuracy: 0.9623\n",
            "Epoch 189/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1635 - accuracy: 0.9322\n",
            "Epoch 190/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1151 - accuracy: 0.9523\n",
            "Epoch 191/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1043 - accuracy: 0.9447\n",
            "Epoch 192/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0998 - accuracy: 0.9497\n",
            "Epoch 193/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1230 - accuracy: 0.9397\n",
            "Epoch 194/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1330 - accuracy: 0.9472\n",
            "Epoch 195/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1006 - accuracy: 0.9548\n",
            "Epoch 196/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0901 - accuracy: 0.9598\n",
            "Epoch 197/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1159 - accuracy: 0.9548\n",
            "Epoch 198/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1155 - accuracy: 0.9523\n",
            "Epoch 199/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1144 - accuracy: 0.9598\n",
            "Epoch 200/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1312 - accuracy: 0.9397\n",
            "Epoch 201/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1088 - accuracy: 0.9523\n",
            "Epoch 202/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1552 - accuracy: 0.9296\n",
            "Epoch 203/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1057 - accuracy: 0.9472\n",
            "Epoch 204/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.1090 - accuracy: 0.9472\n",
            "Epoch 205/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1175 - accuracy: 0.9447\n",
            "Epoch 206/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1347 - accuracy: 0.9523\n",
            "Epoch 207/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1054 - accuracy: 0.9598\n",
            "Epoch 208/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1127 - accuracy: 0.9573\n",
            "Epoch 209/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1008 - accuracy: 0.9598\n",
            "Epoch 210/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1361 - accuracy: 0.9397\n",
            "Epoch 211/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1185 - accuracy: 0.9472\n",
            "Epoch 212/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1113 - accuracy: 0.9497\n",
            "Epoch 213/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0994 - accuracy: 0.9573\n",
            "Epoch 214/300\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.1101 - accuracy: 0.9548\n",
            "Epoch 215/300\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.1104 - accuracy: 0.9523\n",
            "Epoch 216/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.1007 - accuracy: 0.9548\n",
            "Epoch 217/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0960 - accuracy: 0.9573\n",
            "Epoch 218/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0887 - accuracy: 0.9598\n",
            "Epoch 219/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0939 - accuracy: 0.9598\n",
            "Epoch 220/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1390 - accuracy: 0.9548\n",
            "Epoch 221/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1042 - accuracy: 0.9623\n",
            "Epoch 222/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0839 - accuracy: 0.9673\n",
            "Epoch 223/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0944 - accuracy: 0.9573\n",
            "Epoch 224/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0902 - accuracy: 0.9623\n",
            "Epoch 225/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.1204 - accuracy: 0.9548\n",
            "Epoch 226/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0986 - accuracy: 0.9497\n",
            "Epoch 227/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.1086 - accuracy: 0.9598\n",
            "Epoch 228/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1620 - accuracy: 0.9347\n",
            "Epoch 229/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0878 - accuracy: 0.9648\n",
            "Epoch 230/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1177 - accuracy: 0.9472\n",
            "Epoch 231/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1084 - accuracy: 0.9472\n",
            "Epoch 232/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1154 - accuracy: 0.9472\n",
            "Epoch 233/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0895 - accuracy: 0.9598\n",
            "Epoch 234/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0845 - accuracy: 0.9673\n",
            "Epoch 235/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0838 - accuracy: 0.9598\n",
            "Epoch 236/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0995 - accuracy: 0.9497\n",
            "Epoch 237/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1327 - accuracy: 0.9322\n",
            "Epoch 238/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1134 - accuracy: 0.9548\n",
            "Epoch 239/300\n",
            "40/40 [==============================] - 0s 7ms/step - loss: 0.1103 - accuracy: 0.9623\n",
            "Epoch 240/300\n",
            "40/40 [==============================] - 0s 7ms/step - loss: 0.0981 - accuracy: 0.9548\n",
            "Epoch 241/300\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.1162 - accuracy: 0.9523\n",
            "Epoch 242/300\n",
            "40/40 [==============================] - 0s 8ms/step - loss: 0.0852 - accuracy: 0.9623\n",
            "Epoch 243/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.1157 - accuracy: 0.9397\n",
            "Epoch 244/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1271 - accuracy: 0.9497\n",
            "Epoch 245/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0791 - accuracy: 0.9598\n",
            "Epoch 246/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0672 - accuracy: 0.9698\n",
            "Epoch 247/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.1160 - accuracy: 0.9497\n",
            "Epoch 248/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0954 - accuracy: 0.9598\n",
            "Epoch 249/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0985 - accuracy: 0.9598\n",
            "Epoch 250/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0872 - accuracy: 0.9623\n",
            "Epoch 251/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0821 - accuracy: 0.9573\n",
            "Epoch 252/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.1573 - accuracy: 0.9347\n",
            "Epoch 253/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0918 - accuracy: 0.9598\n",
            "Epoch 254/300\n",
            "40/40 [==============================] - 0s 7ms/step - loss: 0.0859 - accuracy: 0.9673\n",
            "Epoch 255/300\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.1273 - accuracy: 0.9497\n",
            "Epoch 256/300\n",
            "40/40 [==============================] - 0s 8ms/step - loss: 0.0744 - accuracy: 0.9598\n",
            "Epoch 257/300\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0778 - accuracy: 0.9648\n",
            "Epoch 258/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1218 - accuracy: 0.9422\n",
            "Epoch 259/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0688 - accuracy: 0.9724\n",
            "Epoch 260/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1021 - accuracy: 0.9548\n",
            "Epoch 261/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0892 - accuracy: 0.9623\n",
            "Epoch 262/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0896 - accuracy: 0.9472\n",
            "Epoch 263/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0866 - accuracy: 0.9598\n",
            "Epoch 264/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0659 - accuracy: 0.9623\n",
            "Epoch 265/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1182 - accuracy: 0.9623\n",
            "Epoch 266/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0818 - accuracy: 0.9623\n",
            "Epoch 267/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1101 - accuracy: 0.9447\n",
            "Epoch 268/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.2551 - accuracy: 0.8869\n",
            "Epoch 269/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1541 - accuracy: 0.9347\n",
            "Epoch 270/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1362 - accuracy: 0.9397\n",
            "Epoch 271/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1100 - accuracy: 0.9548\n",
            "Epoch 272/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1017 - accuracy: 0.9523\n",
            "Epoch 273/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0788 - accuracy: 0.9648\n",
            "Epoch 274/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1095 - accuracy: 0.9523\n",
            "Epoch 275/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0998 - accuracy: 0.9623\n",
            "Epoch 276/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0831 - accuracy: 0.9648\n",
            "Epoch 277/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1414 - accuracy: 0.9447\n",
            "Epoch 278/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0838 - accuracy: 0.9623\n",
            "Epoch 279/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1121 - accuracy: 0.9523\n",
            "Epoch 280/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0874 - accuracy: 0.9623\n",
            "Epoch 281/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0733 - accuracy: 0.9623\n",
            "Epoch 282/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0769 - accuracy: 0.9623\n",
            "Epoch 283/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1404 - accuracy: 0.9372\n",
            "Epoch 284/300\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0987 - accuracy: 0.9548\n",
            "Epoch 285/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0755 - accuracy: 0.9724\n",
            "Epoch 286/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0990 - accuracy: 0.9548\n",
            "Epoch 287/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0728 - accuracy: 0.9673\n",
            "Epoch 288/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0902 - accuracy: 0.9623\n",
            "Epoch 289/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0818 - accuracy: 0.9623\n",
            "Epoch 290/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0737 - accuracy: 0.9623\n",
            "Epoch 291/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1243 - accuracy: 0.9372\n",
            "Epoch 292/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1031 - accuracy: 0.9573\n",
            "Epoch 293/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0874 - accuracy: 0.9598\n",
            "Epoch 294/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0660 - accuracy: 0.9648\n",
            "Epoch 295/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0836 - accuracy: 0.9698\n",
            "Epoch 296/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0928 - accuracy: 0.9598\n",
            "Epoch 297/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.1186 - accuracy: 0.9422\n",
            "Epoch 298/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0779 - accuracy: 0.9648\n",
            "Epoch 299/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0968 - accuracy: 0.9648\n",
            "Epoch 300/300\n",
            "40/40 [==============================] - 0s 3ms/step - loss: 0.0707 - accuracy: 0.9673\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fbc714eb750>"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting the test data\n",
        "\n",
        "ypred = classification.predict(xtest)"
      ],
      "metadata": {
        "id": "kI6qJLTpekR-"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ypred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w2IortTrg1CI",
        "outputId": "77ec5dd2-e5c2-495b-e722-6ff36e3947c3"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[9.93241191e-01],\n",
              "       [2.19753583e-05],\n",
              "       [1.39495152e-10],\n",
              "       [2.34116626e-04],\n",
              "       [4.92328834e-12],\n",
              "       [1.33011857e-09],\n",
              "       [2.71274142e-10],\n",
              "       [2.26131225e-10],\n",
              "       [5.05029953e-19],\n",
              "       [3.11946331e-15],\n",
              "       [1.53288720e-02],\n",
              "       [4.17806557e-04],\n",
              "       [3.87245235e-14],\n",
              "       [3.60618114e-01],\n",
              "       [2.90938682e-04],\n",
              "       [8.88443947e-01],\n",
              "       [2.66718830e-13],\n",
              "       [9.99994278e-01],\n",
              "       [9.90007877e-01],\n",
              "       [9.99999881e-01],\n",
              "       [1.00000000e+00],\n",
              "       [1.87735334e-01],\n",
              "       [2.94788999e-10],\n",
              "       [5.64479343e-08],\n",
              "       [8.37562919e-01],\n",
              "       [2.33024181e-07],\n",
              "       [7.70600528e-11],\n",
              "       [7.38701895e-02],\n",
              "       [1.69354208e-09],\n",
              "       [1.00000000e+00],\n",
              "       [1.15384846e-11],\n",
              "       [9.99986053e-01],\n",
              "       [8.72087840e-04],\n",
              "       [9.85236824e-01],\n",
              "       [1.07976511e-16],\n",
              "       [9.99999642e-01],\n",
              "       [5.55413317e-06],\n",
              "       [9.99077201e-01],\n",
              "       [2.01079846e-08],\n",
              "       [9.89344299e-01],\n",
              "       [7.40027905e-01],\n",
              "       [4.27991688e-15],\n",
              "       [9.76221979e-01],\n",
              "       [6.74894439e-14],\n",
              "       [5.49270451e-01],\n",
              "       [9.99999881e-01],\n",
              "       [7.55152785e-18],\n",
              "       [1.75926402e-06],\n",
              "       [4.80269047e-10],\n",
              "       [9.99500275e-01],\n",
              "       [9.98404801e-01],\n",
              "       [1.49474689e-03],\n",
              "       [9.99878168e-01],\n",
              "       [2.48707033e-09],\n",
              "       [9.31343447e-09],\n",
              "       [4.46191868e-11],\n",
              "       [7.43124950e-10],\n",
              "       [8.24423660e-06],\n",
              "       [2.13651177e-07],\n",
              "       [1.00000000e+00],\n",
              "       [8.64500701e-01],\n",
              "       [9.95112240e-01],\n",
              "       [1.20948626e-10],\n",
              "       [4.56318938e-09],\n",
              "       [9.99889016e-01],\n",
              "       [1.71917621e-02],\n",
              "       [1.00000000e+00],\n",
              "       [9.99998331e-01],\n",
              "       [9.99887943e-01],\n",
              "       [7.08727348e-13],\n",
              "       [1.21671960e-01],\n",
              "       [9.99987602e-01],\n",
              "       [6.37450870e-10],\n",
              "       [1.59020275e-01],\n",
              "       [9.99649644e-01],\n",
              "       [2.49354412e-06],\n",
              "       [4.65927041e-14],\n",
              "       [1.05389999e-08],\n",
              "       [6.78127288e-09],\n",
              "       [1.60417558e-16],\n",
              "       [9.49005485e-01],\n",
              "       [9.99958992e-01],\n",
              "       [9.99971867e-01],\n",
              "       [2.03717154e-09],\n",
              "       [5.59854746e-01],\n",
              "       [5.48478971e-11],\n",
              "       [1.03044802e-10],\n",
              "       [3.91247271e-16],\n",
              "       [9.99884963e-01],\n",
              "       [9.99999642e-01],\n",
              "       [3.19137953e-16],\n",
              "       [3.47461283e-01],\n",
              "       [7.24596232e-02],\n",
              "       [9.73708868e-01],\n",
              "       [6.73559651e-14],\n",
              "       [8.80572282e-11],\n",
              "       [1.00000000e+00],\n",
              "       [2.94010738e-06],\n",
              "       [3.96804978e-07],\n",
              "       [1.43981564e-08],\n",
              "       [2.51191619e-14],\n",
              "       [7.44394990e-09],\n",
              "       [6.30982129e-07],\n",
              "       [1.49312301e-03],\n",
              "       [9.99843121e-01],\n",
              "       [3.11051589e-15],\n",
              "       [9.77418363e-01],\n",
              "       [1.36954198e-03],\n",
              "       [3.04894865e-01],\n",
              "       [9.27709162e-01],\n",
              "       [6.28746406e-08],\n",
              "       [9.17415619e-01],\n",
              "       [9.98485386e-01],\n",
              "       [4.62551753e-07],\n",
              "       [9.63473485e-12],\n",
              "       [4.06510626e-05],\n",
              "       [2.23513507e-06],\n",
              "       [1.57970761e-10],\n",
              "       [2.64215167e-03],\n",
              "       [1.72427086e-10],\n",
              "       [8.22389481e-08],\n",
              "       [4.01487288e-10],\n",
              "       [8.16565514e-01],\n",
              "       [2.56256877e-10],\n",
              "       [9.99949694e-01],\n",
              "       [4.53898747e-06],\n",
              "       [1.01125285e-01],\n",
              "       [2.71260445e-12],\n",
              "       [2.34929450e-14],\n",
              "       [2.81046264e-13],\n",
              "       [9.98723924e-01],\n",
              "       [8.18991930e-10],\n",
              "       [1.92557470e-10],\n",
              "       [6.18490321e-06],\n",
              "       [2.06302684e-05],\n",
              "       [9.09117820e-14],\n",
              "       [1.11434748e-03],\n",
              "       [6.31034434e-01],\n",
              "       [1.00000000e+00],\n",
              "       [5.70452160e-14],\n",
              "       [3.33990641e-10],\n",
              "       [2.21677968e-10],\n",
              "       [1.00000000e+00],\n",
              "       [5.83160054e-09],\n",
              "       [8.61197344e-13],\n",
              "       [9.99981999e-01],\n",
              "       [3.61228285e-06],\n",
              "       [6.90895543e-02],\n",
              "       [4.92424626e-08],\n",
              "       [6.43289422e-09],\n",
              "       [2.20223821e-08],\n",
              "       [2.38661095e-03],\n",
              "       [1.29318050e-05],\n",
              "       [4.95044369e-05],\n",
              "       [1.44646895e-15],\n",
              "       [8.09165537e-01],\n",
              "       [3.37639960e-08],\n",
              "       [9.98504639e-01],\n",
              "       [6.82379986e-10],\n",
              "       [1.00000000e+00],\n",
              "       [9.99267161e-01],\n",
              "       [4.91246155e-09],\n",
              "       [9.42389761e-06],\n",
              "       [9.96918321e-01],\n",
              "       [2.90142181e-11],\n",
              "       [8.04230690e-01],\n",
              "       [9.34508622e-01],\n",
              "       [9.76416707e-01],\n",
              "       [3.15889025e-07],\n",
              "       [1.16939958e-07],\n",
              "       [1.74824562e-15]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.round(ypred.flatten()).astype('int')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "flYeq-5FgmIS",
        "outputId": "45b24e3e-eba3-427e-d38b-71a5e21d8a02"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0,\n",
              "       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,\n",
              "       1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0,\n",
              "       1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,\n",
              "       0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n",
              "       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Comparing actual ytest values with predicted values\n",
        "\n",
        "pd.DataFrame({'Actual values':ytest.flatten(),\n",
        "              'Predicted values':np.round(ypred.flatten()).astype('int')})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "LvsUs1-Ie0vK",
        "outputId": "533a3ca3-37ec-42db-a8af-4f1b1b9c17a4"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Actual values  Predicted values\n",
              "0                1                 1\n",
              "1                0                 0\n",
              "2                0                 0\n",
              "3                0                 0\n",
              "4                0                 0\n",
              "..             ...               ...\n",
              "166              1                 1\n",
              "167              1                 1\n",
              "168              0                 0\n",
              "169              0                 0\n",
              "170              0                 0\n",
              "\n",
              "[171 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8404081-dbd3-4355-b46a-0ce3e6ce467b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Actual values</th>\n",
              "      <th>Predicted values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>167</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>168</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>169</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>170</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>171 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8404081-dbd3-4355-b46a-0ce3e6ce467b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c8404081-dbd3-4355-b46a-0ce3e6ce467b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c8404081-dbd3-4355-b46a-0ce3e6ce467b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Saving the ANN model weights (it can be used whenever we want... each and every time no need to train model)\n",
        "\n",
        "classification.save('classification.h5')"
      ],
      "metadata": {
        "id": "0lWDz7jbe8f1"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "UzQwpGNehH_-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}